# Local .terraform directories
**/.terraform/*
**/terraform.tfvars
*.pem
# .tfstate files
*.tfstate
*.tfstate.*
*local_initial_jenkins_pwd.txt
# Crash log files
crash.log
crash.*.log
*initial_jenkins_pwd.txt
*vaultkey.txt
*jenkins_pwd.txt
*volt.txt


# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
#*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Terraform specific sensitive files
*.tfplan
*.tfplan.*
.terraform.lock.hcl
terraform.tfstate.d/
.terraform/
terraform-provider-*
*.auto.tfvars
terraform.rc
.terraformrc
terraform.d/
.terraform.d/
*terraform.log
terraform_output.txt
terraform_plan.out
*.tfstate.backup
*.tfstate.*.backup
plan.out
plan.json
apply.log
destroy.log

# AWS credentials and config
~/.aws/
.aws/
aws-credentials
credentials
config
*.aws

# Additional sensitive files
*.key
*.pem
*.p12
*.pfx
*.crt
*.cer
*.csr
secrets/
.env
.env.*
!.env.example
*.secret
*secret*
*password*
*pwd*
auth.json
credentials.json
service-account.json
kubeconfig
.kube/config
*.backup
*.bak
